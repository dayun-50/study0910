/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.108
 * Generated at: 2025-09-12 02:07:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class home_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("jar:file:/C:/STS3_workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Day04_Board/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1756098982422L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\r\n");
      out.write("  <style>\r\n");
      out.write("        body {\r\n");
      out.write("            background-color: #0d0d1a;\r\n");
      out.write("            font-family: Arial, sans-serif;\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            height: 100vh;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container {\r\n");
      out.write("            width: 400px;\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            padding: 40px;\r\n");
      out.write("            border-radius: 15px;\r\n");
      out.write("            background-color: rgba(13, 13, 26, 0.8);\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container h1 {\r\n");
      out.write("            color: #00ffff;\r\n");
      out.write("            font-size: 70px;\r\n");
      out.write("            margin-bottom: 40px;\r\n");
      out.write("            margin-top: 10px;\r\n");
      out.write("            text-shadow: 0 0 5px #ffff66, 0 0 15px #fffaaa;\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        h4{\r\n");
      out.write("        	margin-bottom: 5px; \r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("        h4 a{\r\n");
      out.write("        	text-decoration: none;\r\n");
      out.write("        	color: #ffffff;\r\n");
      out.write("        	text-shadow: 0 0 5px #ff00ff, 0 0 15px #ff00ff;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container input[type=\"text\"],\r\n");
      out.write("        .login-container input[type=\"password\"] {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            margin: 20px 0;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-bottom: 2px solid #00ffff;\r\n");
      out.write("            background: transparent;\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            outline: none;\r\n");
      out.write("            font-size: 16px;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container input::placeholder {\r\n");
      out.write("            color: #888;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container button {\r\n");
      out.write("        	float: left;\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 15px;\r\n");
      out.write("            margin-top: 25px;\r\n");
      out.write("            margin-bottom: 15px;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 15px;\r\n");
      out.write("            font-size: 18px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("            background: linear-gradient(to right, #00ffff, #ff4fc6);\r\n");
      out.write("            color: #fff;\r\n");
      out.write("            transition: 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container button:hover {\r\n");
      out.write("            opacity: 0.8;\r\n");
      out.write("            box-shadow: 0 0 5px #ff4fc6, 0 0 30px pink;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        /* 링크 스타일 유지 + hover 시 색상 변경 */\r\n");
      out.write("        .login-container .links {\r\n");
      out.write("            margin-top: 20px;\r\n");
      out.write("            font-size: 14px;\r\n");
      out.write("            color: #aaa;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container .links a {\r\n");
      out.write("            color: #00ffff;\r\n");
      out.write("            /* 기본 민트색 */\r\n");
      out.write("            text-decoration: none;\r\n");
      out.write("            margin: 0 5px;\r\n");
      out.write("            transition: 0.3s;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        .login-container .links a:hover {\r\n");
      out.write("            color: #ff4fc6;\r\n");
      out.write("            /* hover 시 보라색 */\r\n");
      out.write("        }\r\n");
      out.write("        /* ====== 별, 블록 배경 ====== */\r\n");
      out.write("        .star {\r\n");
      out.write("            position: fixed;\r\n");
      out.write("            width: 2px;\r\n");
      out.write("            height: 2px;\r\n");
      out.write("            background: white;\r\n");
      out.write("            border-radius: 50%;\r\n");
      out.write("            animation: twinkle 3s infinite ease-in-out;\r\n");
      out.write("            z-index: 0;\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        @keyframes twinkle {\r\n");
      out.write("\r\n");
      out.write("            0%,\r\n");
      out.write("            100% {\r\n");
      out.write("                opacity: 0.3;\r\n");
      out.write("            }\r\n");
      out.write("\r\n");
      out.write("            50% {\r\n");
      out.write("                opacity: 1;\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("       \r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"login-container\">\r\n");
      out.write("    	<h4><a href=\"/indexpage.MembersController\">혜빈이와 아이들</a></h4>\r\n");
      out.write("        <h1>Login</h1>\r\n");
      out.write("        <form action=\"/members/login\" method=\"post\">\r\n");
      out.write("        <input type=\"text\" placeholder=\"ID\" id=\"id\" name=\"id\">\r\n");
      out.write("        <input type=\"password\" placeholder=\"PW\" id=\"pw\" name=\"pw\">\r\n");
      out.write("        <button id=\"btn\">로그인</button>\r\n");
      out.write("        </form>\r\n");
      out.write("        <div class=\"links\">\r\n");
      out.write("            <a href=\"/\">아이디 찾기</a> /\r\n");
      out.write("            <a href=\"/\">비밀번호 찾기</a> /\r\n");
      out.write("            <a href=\"/members/signPage\">회원가입</a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        // 별 생성\r\n");
      out.write("        for (let i = 0; i < 200; i++) {\r\n");
      out.write("            const s = document.createElement('div'); s.className = 'star';\r\n");
      out.write("            s.style.top = Math.random() * 100 + 'vh';\r\n");
      out.write("            s.style.left = Math.random() * 100 + 'vw';\r\n");
      out.write("            s.style.animationDuration = (2 + Math.random() * 3) + 's';\r\n");
      out.write("            document.body.appendChild(s);\r\n");
      out.write("        }\r\n");
      out.write("        \r\n");
      out.write("  		\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
